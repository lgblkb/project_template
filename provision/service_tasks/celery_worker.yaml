- set_fact:
    watchdog_feature: { }

- block:
    - assert:
        that:
          - so.name is defined
    - set_fact:
        dc_params:
          name: "{{[poetry_info.name,so.name]|join('_')}}"

    - set_fact:
        cw_params:
          name: "{{dc_params.name}}"
          concurrency: "{{so.concurrency|default(1)}}"
          app: "{{so.app|default('app')}}"
          loglevel: "{{so.loglevel|default('INFO')}}"
          hostname: "{{dc_params.name}}"
          events: "{{so.events|default(True)}}"
          autoscale: "{{so.autoscale|default(omit)}}"
          prefetch_multiplier: "{{so.prefetch_multiplier|default(1)}}"
          queues: >-
            {{
            "','.join(['.'.join([base_name,q]) for q in queues])"
            |eval(queues=so.queues|default([so.name]), base_name=poetry_info.name)
            }}
    - set_fact:
        cw_command: >-
          celery --app {{cw_params.app}} worker -O fair
          --loglevel={{cw_params.loglevel}}
          --concurrency={{cw_params.concurrency}}
          --hostname={{cw_params.hostname}}
          --queues {{cw_params.queues}}
          {{'--events' if cw_params.events else ''}}
          {{'--autoscale='+cw_params.autoscale if cw_params.autoscale is defined else ''}}
          --prefetch-multiplier {{cw_params.prefetch_multiplier}}
      when: so.command is undefined

    - block:
        - set_fact:
            cw_watch_dir: "{{project_folder}}/provision/watched"
            cw_watch_patterns:
              - "__{{so.name}}__"
              - "{{'__watched_by_all__' if so.watchdog.all|default(True) else ''}}"
        - file:
            path: "{{cw_watch_dir}}"
            recurse: yes
            state: directory
        - include_tasks: create_watched_file.yaml
          loop: "{{'[p for p in cw_watch_patterns if p]'|eval(cw_watch_patterns=cw_watch_patterns)}}"
          loop_control:
            loop_var: cw_watch_pattern

        - set_fact:
            watchdog_feature:
              command: >-
                watchmedo auto-restart
                --pattern={{"';'.join(['**/*'+p+'*' for p in ps if p])"|eval(ps=cw_watch_patterns)}}
                --directory={{cw_watch_dir}}
                --
                {{so.command|default(cw_command)}}
      when: so.watchdog is undefined or so.watchdog == true or so.watchdog|length > 0

    - include_role: { name: base, tasks_from: read_dyna_data.yaml }
      vars:
        data: "{{{env_name:docker.service}}}"
        merge_items:
          - "{{so}}"
          - "{{dc_params}}"
          - command: "{{so.command|default(cw_command)}}"
          - "{{watchdog_feature}}"
        set_to: service_info
  vars: { so: "{{service_options}}" }

- include_role: { name: base, tasks_from: run_container.yaml }
  vars:
    info: "{{service_info}}"